# -*- coding: utf-8 -*-
"""notebook_predictive_analytics_LSTM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdLeA6n_Pre0_AXgUmCXDNiNTUdOTTVL

# Import Library

- gdown: digunakan untuk mengunduh file dari Google Drive menggunakan ID file.
- pandas, numpy: pustaka utama untuk manipulasi data dan perhitungan numerik.
- matplotlib.pyplot, seaborn: pustaka visualisasi untuk eksplorasi dan analisis data.
- datetime: digunakan untuk menangani tipe data waktu.
- sklearn: menyediakan alat bantu preprocessing dan metrik evaluasi model ML.
- tensorflow.keras: digunakan untuk membangun dan melatih model deep learning berbasis LSTM.
"""

import gdown
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, root_mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

"""# Load Dataset

Dataset diunduh dari Google Drive menggunakan gdown dan disimpan sebagai dataset.csv.
Kemudian, dataset dibaca ke dalam DataFrame menggunakan pd.read_csv() untuk proses selanjutnya.
"""

#membaca dataset https://drive.google.com/file/d/1h7vtc3wEve5Lx9-pVfXEkij1cU-kfYQi/view?usp=drive_link
file_id = "1h7vtc3wEve5Lx9-pVfXEkij1cU-kfYQi"
url = f"https://drive.google.com/uc?id={file_id}"
output = "dataset.csv"

gdown.download(url, output, quiet=False)

df = pd.read_csv(output)

df.head()

"""# Preprocessing Data"""

df.info()

df['Date'] = pd.to_datetime(df['Date'])

"""untuk mengonversi kolom tanggal (Date) menjadi format datetime, sehingga lebih mudah diolah saat analisis waktu atau visualisasi."""

def parse_volume(vol):
    vol = vol.replace(',', '').strip()
    if 'B' in vol:
        return float(vol.replace('B', '')) * 1_000_000_000
    elif 'M' in vol:
        return float(vol.replace('M', '')) * 1_000_000
    else:
        return float(vol)  # fallback kalau tanpa simbol

df['Vol.'] = df['Vol.'].astype(str).apply(parse_volume)

# Bersihkan kolom 'Change %'
df['Change %'] = df['Change %'].str.replace('%', '').astype(float)

"""1. Membersihkan dan mengonversi kolom volume (Vol.):
- Menghapus koma (,) dan satuan volume seperti 'B' (billion) dan 'M' (million).
- Mengubah string menjadi nilai numerik dalam satuan standar.

2. Menghapus simbol persen (%) dari kolom Change % dan mengonversinya ke tipe data float.

# Exploratory Data Analysis
"""

df.info()
df.describe()

plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Price'])
plt.title('Pergerakan Harga Saham NVIDIA')
plt.xlabel('Tanggal')
plt.ylabel('Harga')
plt.grid(True)
plt.show()

"""Visualisasi tren harga saham NVIDIA dari waktu ke waktu. Ini membantu mengamati pola musiman, lonjakan harga, atau tren jangka panjang."""

plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi')
plt.show()

"""Heatmap korelasi antar fitur numerik untuk mengetahui hubungan antar variabel seperti Price, Open, High, Low, dan Vol. Korelasi tinggi dapat digunakan sebagai insight untuk pemodelan."""

plt.figure(figsize=(10, 5))
sns.scatterplot(x='Vol.', y='Price', data=df)
plt.title('Volume vs Harga')
plt.show()

"""Plot scatter yang menunjukkan hubungan antara Volume dan Price. Ini bisa memberikan gambaran apakah volume transaksi memiliki pengaruh terhadap harga saham.

## Modeling (KNN)
"""

X_lr = df[['Open', 'High', 'Low', 'Vol.']]
y_lr = df['Price']

"""1. X_lr adalah variabel independen atau fitur yang digunakan untuk memprediksi harga saham. Fitur yang dipilih adalah:
- Open: harga pembukaan saham
- High: harga tertinggi dalam sehari
- Low: harga terendah dalam sehari
- Vol.: volume transaksi

2. y_lr adalah variabel target atau harga saham (Price) yang ingin diprediksi.
"""

# Normalisasi fitur
scaler_knn = MinMaxScaler()
X_knn_scaled = scaler_knn.fit_transform(X_lr)

# Modeling KNN
knn_model = KNeighborsRegressor(n_neighbors=5)
knn_model.fit(X_knn_scaled, y_lr)
y_pred_knn = knn_model.predict(X_knn_scaled)

mae_knn = mean_absolute_error(y_lr, y_pred_knn)
rmse_knn = mean_squared_error(y_lr, y_pred_knn)
r2_knn = r2_score(y_lr, y_pred_knn)

print("\nKNN Regression Evaluation:")
print("MAE:", mae_knn)
print("RMSE:", rmse_knn)
print("R2 Score:", r2_knn)

"""KNeighborsRegressor(n_neighbors=5): Model KNN dibuat dengan parameter n_neighbors=5, yang berarti model akan menggunakan 5 tetangga terdekat untuk membuat prediksi harga saham.

# Modeling (Linear Regression)
"""

lr_model = LinearRegression()
lr_model.fit(X_lr, y_lr)
y_pred_lr = lr_model.predict(X_lr)

mae_lr = mean_absolute_error(y_lr, y_pred_lr)
rmse_lr = root_mean_squared_error(y_lr, y_pred_lr)
r2_lr = r2_score(y_lr, y_pred_lr)

print("Linear Regression Evaluation:")
print("MAE:", mae_lr)
print("RMSE:", rmse_lr)
print("R2 Score:", r2_lr)

"""- LinearRegression() membuat objek model regresi linear dari library scikit-learn.

- fit(X_lr, y_lr) melakukan pelatihan model dengan mempelajari hubungan antara fitur dan target berdasarkan data yang ada.

- predict(X_lr) digunakan untuk menghasilkan prediksi harga saham berdasarkan model yang sudah dilatih.

# Modeling: LSTM
"""

price_data = df[['Price']]
scaler = MinMaxScaler()
price_scaled = scaler.fit_transform(price_data)

"""- Kolom Price yang digunakan untuk pelatihan model LSTM.
- MinMaxScaler digunakan untuk menormalkan data harga agar berada dalam rentang 0–1, yang penting untuk mempercepat dan menstabilkan proses pelatihan neural network seperti LSTM.

Membuat Data Window Time Series
"""

def create_dataset(dataset, time_step=60):
    X, y = [], []
    for i in range(len(dataset)-time_step-1):
        X.append(dataset[i:(i+time_step), 0])
        y.append(dataset[i+time_step, 0])
    return np.array(X), np.array(y)

time_step = 60
X_lstm, y_lstm = create_dataset(price_scaled, time_step)
X_lstm = X_lstm.reshape(X_lstm.shape[0], X_lstm.shape[1], 1)

# Model LSTM
lstm_model = Sequential()
lstm_model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
lstm_model.add(LSTM(50))
lstm_model.add(Dense(1))
lstm_model.compile(loss='mean_squared_error', optimizer='adam')

"""- Model menggunakan dua lapisan LSTM masing-masing dengan 50 unit: return_sequences=True artinya LSTM pertama mengembalikan seluruh urutan untuk layer LSTM kedua.
- Dense(1) digunakan untuk memprediksi satu nilai harga saham.
- Model dikompilasi dengan:
  - Loss function: mean_squared_error
  - Optimizer: adam untuk pelatihan yang efisien dan stabil.
"""

# Training
lstm_model.fit(X_lstm, y_lstm, epochs=10, batch_size=32, verbose=1)

"""Model dilatih selama 10 epoch dengan ukuran batch 32."""

# Prediction & Evaluation
y_pred_lstm = lstm_model.predict(X_lstm)
y_pred_lstm_inv = scaler.inverse_transform(y_pred_lstm.reshape(-1, 1))
y_lstm_inv = scaler.inverse_transform(y_lstm.reshape(-1, 1))

mae_lstm = mean_absolute_error(y_lstm_inv, y_pred_lstm_inv)
rmse_lstm = root_mean_squared_error(y_lstm_inv, y_pred_lstm_inv)
r2_lstm = r2_score(y_lstm_inv, y_pred_lstm_inv)

print("\nLSTM Model Evaluation:")
print("MAE:", mae_lstm)
print("RMSE:", rmse_lstm)
print("R2 Score:", r2_lstm)

"""Model memprediksi harga berdasarkan input time-series.

## Visualisasi
"""

#Visualisasi MAE
plt.figure(figsize=(8, 3))
models = ['KNN', 'Linear Regression', 'LSTM']
mae_values = [mae_knn, mae_lr, mae_lstm]

plt.barh(models, mae_values, color=['skyblue', 'salmon', 'lightgreen'])
plt.xlabel('MAE')
plt.title('Perbandingan MAE')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Linear Regression memiliki MAE yang jauh lebih kecil dibanding KNN dan LSTM, artinya secara umum model ini membuat kesalahan prediksi yang lebih kecil rata-ratanya dibanding KNN dan LSTM."""

#Visualisasi RMSE
plt.figure(figsize=(8, 3))
rmse_values = [rmse_knn, rmse_lr, rmse_lstm]

plt.barh(models, rmse_values, color=['skyblue', 'salmon', 'lightgreen'])
plt.xlabel('RMSE')
plt.title('Perbandingan RMSE')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Linear Regression kembali unggul, dengan nilai RMSE yang jauh lebih kecil. Ini menunjukkan bahwa prediksi Linear Regression tidak hanya rata-rata lebih akurat (MAE), tapi juga lebih stabil terhadap outlier."""

#Visualisasi R2 Score
plt.figure(figsize=(8, 3))
r2_values = [r2_knn, r2_lr, r2_lstm]

plt.barh(models, r2_values, color=['skyblue', 'salmon', 'lightgreen'])
plt.xlabel('R² Score')
plt.title('Perbandingan R² Score')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Ketiga model memiliki R² Score yang sangat tinggi, menunjukkan keduanya sangat mampu memodelkan hubungan dalam data. Namun Linear Regression sedikit lebih unggul dengan nilai hampir sempurna (0.9997)."""